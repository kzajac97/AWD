import numpy as np
import pandas as pd

from .interface import DataSetI


def get_image_at_id(frame: pd.DataFrame, index: int) -> np.array:
    """Retrieve image at given index from MNIST DataFrame"""
    return frame.loc[index, "pixel0": "pixel783"].values.reshape(28, 28)


class MNISTDataSet:
    """
    Class holds MNIST data set generator implementation
    Full data set is stored in memory
    """
    def __init__(self, data_set: pd.DataFrame):
        """
        :param data_set: pandas DataFrame with MNIST images
        """
        super().__init__()

        self.features = data_set.loc[:, "pixel0": "pixel783"]
        self.labels = data_set["label"]
        self.n_data_points = data_set.index.size

    @classmethod
    def from_csv(cls, path: str):
        """
        :param path: relative path to .csv file with data set

        :return: MNISTDataSet object constructed from file
        """
        data_set = pd.read_csv(path)
        return cls(data_set)

    @staticmethod
    def _prepare_images(samples: np.array) -> np.array:
        """
        Prepare data rows to be used by neural network
        Reshape and rescale values
        """
        samples = samples.reshape(len(samples), 28, 28)
        samples = np.expand_dims(samples, axis=-1)
        samples = samples.astype("float32")
        samples = samples / 255.0

        return samples

    def real_batch(self, size: int = 32) -> np.array:
        """
        :param size: number of images

        :return: batch of real data samples
        """
        sample_ids = np.random.randint(0, self.n_data_points, size)
        samples = self.features.iloc[sample_ids].values

        return self._prepare_images(samples), np.ones((size, 1))

    def latent_batch(self, size: int = 32, latent_dim: int = 100) -> np.array:
        """
        :param size: number of images
        :param latent_dim: dimension of latent random distribution

        :return: batch of real data samples
        """
        inputs = np.random.randn(latent_dim * size)
        inputs = inputs.reshape(size, latent_dim)

        return inputs

    def batch(self, samples: np.array, size: int = 32) -> tuple:
        """
        Generate batch for GAN training

        :param samples: generated by generator network
        :param size: batch size

        :return: tuple of features and labels for GAN training with real and generated data points
        """
        real_x, real_y = self.real_batch(size // 2)
        generated_x, generated_y = samples, np.zeros((size // 2, 1))

        x, y = np.vstack([real_x, generated_x]), np.vstack([real_y, generated_y])
        ordering = np.random.permutation(len(x))

        return x[ordering], y[ordering]
